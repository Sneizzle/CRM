@using CRM.Client.Components.Contacts;
@using CRM.Shared.Model;
@using Microsoft.JSInterop;
@using System.Linq.Expressions
@using CRM.Client.Repositories;

@inject HttpClient http;
@inject IJSRuntime JsRuntime

@if (SelectedItem == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*-----------------------------------------------------------------edit data-----------------------------------------------*@
    @if (isEditing)
    {
        <div class="container">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-8">
                        <h2>@SelectedItem.Name <b style="font-weight: bolder;">Kontaktpersoner</b></h2>
                    </div>
                    <div class="col-sm-4">
                        @*---------------TILFØJ NY---------------  *@
                        <button @onclick="CreateContactModal" style="border-radius: 60px; float: right; color: white; font-weight: bolder; background: deepskyblue; padding-left: 10px; padding-right: 10px;" class="btn" type="button"> + Tilføj ny</button>

                    </div>
                </div>
            </div>

            <table class="table">
                <tr style="font-weight: bold; border: black; border-bottom-style: solid;">
                    <th>Navn</th>
                    <th>Email</th>
                    <th>Telefonnummer</th>
                    <th>Handlinger</th>
                </tr>
                <tbody>
                    @foreach (var contact in ConRepo.contacts)
                    {
                        if (contact.CustomerId == SelectedItem.Id)
                        {
                            if (contact.IsHidden == false)
                            {
                                <tr class="tab-content">
                                    <td>@contact.Name</td>
                                    <td>@contact.Email</td>
                                    <td>@contact.PhoneNumber</td>
                                    @*---------------Handlings knapper--------------- *@
                                    <td>
                                        <a @onclick="()=> EditContactModal(contact)"><img src="/css/Logos/EditColor.svg" style="cursor: pointer;border: none !important; border-style: none !important; border-color: transparent !important; outline: none !important; height: 30px; width: 33px;" alt="blyant" /></a>
                                        <a @onclick="() => ArchiveContact(contact)"><img src="/css/Logos/DeleteColor.svg" style="cursor: pointer;border: 0 !important; height: 30px; width: 33px;" alt="du furet" /></a>
                                    </td>
                                </tr>
                            }
                        }
                    }
                @*New Contact editable field code *@
                @if (showNewContactRow)
                {
                

                    <tr class="tab-content">
                        <td><input @bind="newContact.Name" /></td>
                        <td><input @bind="newContact.Email" /></td>
                        <td><input @bind="newContact.PhoneNumber" /></td>
                        <td>
                            <a @onclick="SaveNewContact">
                                    <img src="/css/Logos/SaveColor.svg" style="cursor: pointer;border: 0 !important; height: 30px; width: 33px; color: green;" alt="gem" />
                            </a>
                            <a @onclick="ResetNewContact">
                                    <img src="/css/Logos/DeleteColor.svg" style="cursor: pointer; border: 0 !important; height: 30px; width: 33px;" alt="du furet" />
                            </a>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
        <div style="float: right; margin: 10px; font-size: 22px">
            @*<button> Gem</button>*@
            <button @onclick="closeEdit"> Afslut Redigering</button>
        </div>
    }
    @*------------------------------------------------------view data-------------------------------------------------------------*@
    else
    {
        <div>
            <div>
                <p style="align-self: center"> <b>Telefonnummer:</b> @SelectedItem.PhoneNumber</p>
            </div>
            <table class="table">
                <caption style="caption-side:top; align-content:center ;color:black;"><b>Kontaktpersoner</b></caption>
                <tbody>
                    @foreach (var contact in ConRepo.contacts)
                    {
                        if (contact.CustomerId == SelectedItem.Id)
                        {
                            if (contact.IsHidden == false)
                            {
                                <tr>
                                    <td>@contact.Name</td>
                                    <td>@contact.Email</td>
                                    <td>@contact.PhoneNumber</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
            <div class="container">
                <div class="row">
                    <div class="col-sm">
                        <p> <b>Tilgængelige servicetimer:</b> @SelectedItem.ServiceHours</p>
                        <p> <b>Størrelse på kunden:</b> @SelectedItem.EmployeeCount</p>
                        <p> <b>Adresse:</b> @SelectedItem.StreetName, @SelectedItem.ZipCode @SelectedItem.CityName</p>
                        <p> <b>CVR:</b> @SelectedItem.CVR</p>
                        <p> <b>EAN:</b> @SelectedItem.EAN</p>
                    </div>
                    <div class="col-sm">
                        <button class="btn" style="float:right; border-color:black; height: 75px; width: 200px;">Task logbog</button>
                        <textarea style="float:right; margin-top: 10px; " placeholder="Kommentarboks"></textarea>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-dark" type="button" @onclick="editCustomer">Rediger</button>
            <button class="btn btn-primary" type="button" @onclick="Cancel">Okay</button>
        </div>
    }
}

@*-------------------------------------------------------------------Logik---------------------------------------------------- *@
@code {
   
    private Contact newContact = new();
    //CustomerRepo CusRepo = CustomerRepo.Instance;
    ContactsRepo ConRepo = ContactsRepo.Instance;



    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

  
    [Parameter]
    public Customer? SelectedItem { get; set; }
    private bool isEditing = false;

    private async Task Cancel() => await BlazoredModal.CloseAsync();


    private void editCustomer()
    {
        isEditing = true;
    }
    private void closeEdit()
    {
        isEditing = false;
    }

    
    private bool showNewContactRow = false;
    //private string newContactName = "";
    //private string newContactEmail = "";
    //private string newContactPhoneNumber = "";

    private async void SaveNewContact()
    {

        newContact.CustomerId = SelectedItem.Id;
        newContact.DateCreated = DateTime.Now;
        try
        {
            var response = await http.PostAsJsonAsync<Contact>("api/Contacts", newContact);
            if (response.IsSuccessStatusCode == true)
            {
                ConRepo.AddToContacts(newContact);
                ResetNewContact();
                
                StateHasChanged();
            }
            else
            {
                newContact.Name = "Navn Mangler";
                StateHasChanged();

            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

    }

    private void ResetNewContact()
    {
    //newContactName = "";
    //newContactEmail = "";
    //newContactPhoneNumber = "";
        newContact = new Contact();
        showNewContactRow = false;
    }


    private async void CreateContactModal()
    {
        showNewContactRow = true;
        //var parameters = new ModalParameters()
        //  .Add(nameof(CreateContact.SelectedItem), SelectedItem);
        //var options = new ModalOptions()
        //    {
        //        Size = ModalSize.Automatic
        //    };
        //var contactResult = Modal.Show<CreateContact>("", parameters, options);
        //var result = await contactResult.Result;
        //if (!result.Cancelled)
        //{
        //    Contact tmpContact = (Contact)result.Data;
        //    ConRepo.AddToContacts(tmpContact);
        //    StateHasChanged();
        //}
        //else
        //{
        //    Console.WriteLine("Create contact cancel");
        //}
    }
    private void EditContactModal(Contact contact)
    {
        var parameters = new ModalParameters()
        .Add(nameof(EditContact.ContactToEdit), contact);
        var options = new ModalOptions()
            {
                Size = ModalSize.Automatic
            };
        Modal.Show<EditContact>("", parameters, options);
    }

    public async void ArchiveContact(Contact contact)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            try
            {
                var content = JsonContent.Create(contact);
                await http.PutAsync($"api/Contacts/Archive/{contact.Id}", content);
                ConRepo.RemoveFromContacts(contact);
                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
}
