@page "/"
@using CRM.Shared;
@using CRM.Shared.Model;
@using CRM.Client.Components;
@inject HttpClient http;


<PageTitle>CustomersIndex</PageTitle>

@if (customers == null)
{
    <p><em>Loading..</em></p>
}

else
{  

    <div style="max-width: 1000px;max-height:800px; margin:auto; overflow: auto;">
        <input type="text" id="myInput" onkeyup="searchNames()" placeholder="Search up a customer..">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a style="color: black; cursor: pointer">
                            <href @onclick="SortByName"> name  </href>
                        </a>

                    </th>
                    <th>Phonenumber</th>
                    <th @onclick="SortByServiceHours">Servicehours</th>
                    <th @onclick="SortByDateModified">Date Modified</th>
                    <th>Opret task</th>
                    <th>Tank op</th>
                </tr>
            </thead>
            <tbody class="hoverTable">
                @foreach (var customer in customers)
                {
                    <tr @onclick="@(() => OpenModal(customer))">
                        <td>@customer.Name</td>
                        <td>@customer.PhoneNumber</td>
                        <td>@customer.ServiceHours</td>
                        <td>@customer.DateModified</td>
                        <td>
                            <div>
                                <button style="border:thin"><img src="/Createtask.svg" alt="Star SVG" width="25" height="25" /></button>
                            </div>
                        </td>
                        <td>
                            <div>
                                <button style="border: thin"><img src="/Gasicon.svg" alt="Star SVG" width="25" height="25" /></button>
                            </div>

                        </td>



                    </tr>
                    <tr style="border-bottom: 1px solid #ccc;"></tr>

                }
            </tbody>
        </table>
    </div>

}


@code {
    private List<Customer> customers;
    private bool sortAscending = true;
    private bool sortAscendingName = true;
    private bool sortAscendingHours = true;
    private List<Contact> contacts;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    private void OpenModal(Customer customer)
    {
        var customerContacts = new List<Contact>();
        for (int i = 0; i < contacts.Count; i++)
        {
            if (contacts[i].CustomerId == customer.Id)
            {
                customerContacts.Add(contacts[i]);

            }
        }

        var parameters = new ModalParameters()
            .Add(nameof(CustomerInfo.SelectedItem), customer)
            .Add(nameof(CustomerInfo.Contacts), customerContacts);
        var options = new ModalOptions()
            {
                Size = ModalSize.Automatic
            };
        Modal.Show<CustomerInfo>($"Information for {customer.Name}", parameters, options);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        customers = await http.GetFromJsonAsync<List<Customer>>("api/Customers");
        contacts = await http.GetFromJsonAsync<List<Contact>>("api/Contacts");
    }
    private void SortByName()
    {
        sortAscendingName = !sortAscendingName; //Sætter til false onClick
        sortAscendingHours = true;
        sortAscending = true;
        if (sortAscendingName == true)
        {
            customers = customers.OrderByDescending(c => c.Name).ToList();
        }
        else
        {
            customers = customers.OrderBy(c => c.Name).ToList();

        }
    }
    private void SortByDateModified()
    {
        sortAscending = !sortAscending;
        sortAscendingHours = true; // hvis vi ikke resetter, bliver der ikke ønsket adfærd 
        sortAscendingName = true;
        if (sortAscending == true)
        {
            customers = customers.OrderByDescending(c => c.DateModified).ToList();
        }
        else
        {
            customers = customers.OrderBy(c => c.DateModified).ToList();

            //customers => customers.DateModified is < DateTime.
        }
    }
    private void SortByServiceHours()
    {
        sortAscending = true;
        sortAscendingName = true;
        sortAscendingHours = !sortAscendingHours;
        if(sortAscendingHours == true)
        {
            customers = customers.OrderByDescending(c => c.ServiceHours).ToList();

        }
        else 
        {
            customers = customers.OrderBy(c => c.ServiceHours).ToList();
        }

    }
    private void searchNames()
    {
        
    }
}
}

<style style="text/css">
    /* Source: https://www.textfixer.com/tutorials/highlight-table-row.php*/
    .hoverTable {
        /* width: 100%; */
        border-collapse: collapse;
    }

        /* Define the default color for all the table rows */
        .hoverTable tr {
            background: none;
        }
            /* Define the hover highlight color for the table row */
            .hoverTable tr:hover {
                background-color: lightgray;
            }
</style>
<style>
    #myInput {
        background-image: url('/css/searchicon.png'); /* Add a search icon to input */
        background-position: 10px 12px; /* Position the search icon */
        background-repeat: no-repeat; /* Do not repeat the icon image */
        width: 250px; /* Full-width */
        font-size: 16px; /* Increase font-size */
        padding: 12px 20px 12px 40px; /* Add some padding */
        border: 5px solid #ddd; /* Add a grey border */
        margin-bottom: 12px; /* Add some space below the input */
    }
</style>