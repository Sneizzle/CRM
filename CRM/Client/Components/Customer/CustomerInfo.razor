@using CRM.Client.Components.Contacts;
@using CRM.Client.Components.Tasks;
@using CRM.Shared.Model;
@using Microsoft.JSInterop;
@using System.Linq.Expressions
@using CRM.Client.Repositories;

@inject HttpClient http;
@inject IJSRuntime JsRuntime

@if (SelectedItem == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*-----------------------------------------------------------------edit data-----------------------------------------------*@
    @if (isEditing)
    {
        <div class="container">
            <EditForm Model="SelectedItem">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-sm">
                        <div class="mb-3">
                            <label class="form-label">Navn*</label>
                            <input class="form-control" @bind="SelectedItem.Name" type="text" />
                            <ValidationMessage For="() => SelectedItem.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Adresse</label>
                            <input class="form-control" @bind="SelectedItem.StreetName" type="text" />
                            <ValidationMessage For="() => SelectedItem.StreetName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">By</label>
                            <input class="form-control" @bind="SelectedItem.CityName" type="text" />
                            <ValidationMessage For="() => SelectedItem.CityName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Postnummer</label>
                            <input class="form-control" @bind="SelectedItem.ZipCode" type="text" />
                            <ValidationMessage For="() => SelectedItem.ZipCode" />
                        </div>
                    </div>
                    <div class="col-sm">
                        <div class="mb-3">
                            <label class="form-label">Telefonnummer</label>
                            <input class="form-control" @bind="SelectedItem.PhoneNumber" type="text" />
                            <ValidationMessage For="() => SelectedItem.PhoneNumber" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">CVR*</label>
                            <input class="form-control" @bind="SelectedItem.CVR" type="text" /> 
                            <ValidationMessage For="() => SelectedItem.CVR" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">EAN*</label>
                            <input class="form-control" @bind="SelectedItem.EAN" type="text" />
                            <ValidationMessage For="() => SelectedItem.EAN" />
                        </div>
                        <button class="btn btn-primary" style="float:right" @onclick="UpdateCustomer">Opdater Kunde</button>
                    </div>
                </div>
            </EditForm>
        </div>




        @*----------------------------------------------------------Bottom Section------------------------------------------------------------------*@
        <div class="container">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-8">
                        <h2>@SelectedItem.Name <b style="font-weight: bolder;">Kontaktpersoner</b></h2>
                    </div>
                    <div class="col-sm-4">
                        @*---------------TILFØJ NY---------------  *@
                        <button @onclick="CreateContactModal" style="border-radius: 60px; float: right; color: white; font-weight: bolder; background: deepskyblue; padding-left: 10px; padding-right: 10px;" class="btn" type="button"> + Tilføj ny</button>
                    </div>
                </div>
            </div>

            <table class="table">
                <tr style="font-weight: bold; border: black; border-bottom-style: solid;">
                    <th>Navn</th>
                    <th>Email</th>
                    <th>Telefonnummer</th>
                    <th>Handlinger</th>
                </tr>
                <tbody>
                    @foreach (var contact in ConRepo.contacts)
                    {
                        if (contact.CustomerId == SelectedItem.Id && contact.IsHidden == false)
                        {
                            var currentContact = contact;
                            var tmp = contact;

                            if (editingContact && editingContactData == currentContact)
                            {
                                // ----------------------------------  INPUT FIELDS FOR EDITING EXISTING CONTACT-------------------------------
                                <tr class="tab-content">
                                    <td><input @bind="editingContactData.Name" /></td>
                                    <td><input @bind="editingContactData.Email" /></td>
                                    <td><input @bind="editingContactData.PhoneNumber" /></td>
                                    <td>
                                        <a @onclick="() => SaveEditedContact(currentContact)">
                                            <img src="/css/Logos/SaveColor.svg" style="cursor: pointer; border: 0 !important; height: 30px; width: 33px; color: green;" alt="gem" />
                                        </a>
                                        <a @onclick="() => CancelEdit(tmp)">
                                            <img src="/css/Logos/Cancel.svg" style="cursor: pointer; border: 0 !important; height: 30px; width: 33px;" alt="du furet" />
                                        </a>
                                    </td>
                                </tr>
                            }
                            else
                            {
                                // --------------------------------------- Show regular Table ----------------------------------------
                                <tr class="tab-content">
                                    <td>@currentContact.Name</td>
                                    <td>@currentContact.Email</td>
                                    <td>@currentContact.PhoneNumber</td>
                                    <td>
                                        <a @onclick="()=> EditContact(currentContact)"><img src="/css/Logos/EditColor.svg" style="cursor: pointer; border: none !important; border-style: none !important; border-color: transparent !important; outline: none !important; height: 30px; width: 33px;" alt="blyant" /></a>
                                        <a @onclick="() => ArchiveContact(currentContact)"><img src="/css/Logos/DeleteColor.svg" style="cursor: pointer; border: 0 !important; height: 30px; width: 33px;" alt="du furet" /></a>
                                    </td>
                                </tr>
                            }
                        }
                    }
                    @*----------------------------------------New Contact Editable Field Code ----------------------------------*@
                    @if (showNewContactRow)
                    {
                        <tr class="tab-content">
                            <td><input @bind="newContact.Name" /></td>
                            <td><input @bind="newContact.Email" /></td>
                            <td><input @bind="newContact.PhoneNumber" /></td>
                            <td>
                                <a @onclick="SaveNewContact">
                                    <img src="/css/Logos/SaveColor.svg" style="cursor: pointer;border: 0 !important; height: 30px; width: 33px; color: green;" alt="gem" />
                                </a>
                                <a @onclick="ResetNewContact">
                                    <img src="/css/Logos/DeleteColor.svg" style="cursor: pointer; border: 0 !important; height: 30px; width: 33px;" alt="du furet" />
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div style="float: right; margin: 10px; font-size: 22px">
            @*<button> Gem</button>*@
            <a>  <img src="/css/Logos/ReturnColor.svg" @onclick="closeEdit" style="cursor: pointer; border: 0 !important; height: 40px; width: 43px;" alt="Gå tilbage" /></a>
        </div>
    }
    @*------------------------------------------------------view data (not editing window)--------------------------------------------------*@
    else
    {
        <div>
            <div>
                <p style="align-self: center"> <b>Telefonnummer:</b> @SelectedItem.PhoneNumber</p>
            </div>
            <table class="table">
                <caption style="caption-side:top; align-content:center ;color:black;"><b>Kontaktpersoner</b></caption>
                <tbody>
                    @foreach (var contact in ConRepo.contacts)
                    {
                        if (contact.CustomerId == SelectedItem.Id)
                        {
                            if (contact.IsHidden == false)
                            {
                                <tr>
                                    <td>@contact.Name</td>
                                    <td>@contact.Email</td>
                                    <td>@contact.PhoneNumber</td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
            <div class="container">
                <div class="row">
                    <div class="col-sm">
                        <p> <b>Tilgængelige servicetimer:</b> @SelectedItem.ServiceHours</p>
                        <p> <b>Størrelse på kunden:</b> @SelectedItem.EmployeeCount</p>
                        <p> <b>Adresse:</b> @SelectedItem.StreetName, @SelectedItem.ZipCode @SelectedItem.CityName</p>
                        <p> <b>CVR:</b> @SelectedItem.CVR</p>
                        <p> <b>EAN:</b> @SelectedItem.EAN</p>
                    </div>
                    <div class="col-sm">
                        <button @onclick="OpenTaskLogModal" class="btn" style="float:right; border-color:black; height: 75px; width: 200px;">Task logbog</button>
                        <textarea style="float:right; margin-top: 10px; " placeholder="Kommentarboks"></textarea>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-dark" type="button" @onclick="editCustomer">Rediger</button>
            <button class="btn btn-primary" type="button" @onclick="Cancel">Okay</button>
        </div>
    }
}

@*-------------------------------------------------------------------Logik---------------------------------------------------- *@
@code {



    private bool editingContact = false;
    private Contact editingContactData;
    private Contact initialman = new();
    private void EditContact(Contact contact)
    {
        initialman.Name = contact.Name;
        initialman.Email = contact.Email;
        initialman.PhoneNumber = contact.PhoneNumber;
        editingContactData = contact;
        editingContact = true;
    }
    private async void SaveEditedContact(Contact currentContact)
    {
        try
        {
            var response = await http.PutAsJsonAsync<Contact>($"api/Contacts/{currentContact.Id}", editingContactData);
            if (response.IsSuccessStatusCode == true)
            {
                editingContact = false;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("somfing went wong");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    private void CancelEdit(Contact tmp)
    {

        editingContactData.Name = initialman.Name;
        editingContactData.Email = initialman.Email;
        editingContactData.PhoneNumber = initialman.PhoneNumber;
        editingContact = false;


        StateHasChanged();
    }
    private Contact newContact = new();
    //CustomerRepo CusRepo = CustomerRepo.Instance;
    ContactsRepo ConRepo = ContactsRepo.Instance;
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [Parameter]
    public Customer? SelectedItem { get; set; }
    private Contact newContact = new();
    private Contact editingContactData;
    private Contact initialman = new();
    private bool showNewContactRow = false;
    private bool editingContact = false;
    private bool isEditing = false;
    private async Task Cancel() => await BlazoredModal.CloseAsync();

    private void editCustomer()
    {
        isEditing = true;
    }
    private void closeEdit()
    {
        isEditing = false;
    }
    private async void SaveNewContact()
    {
        newContact.CustomerId = SelectedItem.Id;
        newContact.DateCreated = DateTime.Now;
        try
        {
            var response = await http.PostAsJsonAsync<Contact>("api/Contacts", newContact);
            if (response.IsSuccessStatusCode == true)
            {
                ConRepo.AddToContacts(newContact);
                ResetNewContact();
                StateHasChanged();
            }
            else
            {
                newContact.Name = "Navn Mangler";
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    private void ResetNewContact()
    {
        newContact = new Contact();
        showNewContactRow = false;
    }
    private async void CreateContactModal()
    {
        showNewContactRow = true;
    }
    private void OpenTaskLogModal()
    {
        var parameters = new ModalParameters()
            .Add(nameof(TaskLog.SelectedItem), SelectedItem);
        var options = new ModalOptions()
            {
                Size = ModalSize.Automatic
            };
        Modal.Show<TaskLog>($"Task logbog for: {SelectedItem.Name}", parameters, options);
    }
    public async void ArchiveContact(Contact contact)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            try
            {
                var content = JsonContent.Create(contact);
                await http.PutAsync($"api/Contacts/Archive/{contact.Id}", content);
                ConRepo.RemoveFromContacts(contact);
                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
    private void EditContact(Contact contact)
    {
        initialman.Name = contact.Name;
        initialman.Email = contact.Email;
        initialman.PhoneNumber = contact.PhoneNumber;
        editingContactData = contact;
        editingContact = true;
    }
    private async void SaveEditedContact(Contact currentContact)
    {
        try
        {
            var response = await http.PutAsJsonAsync<Contact>($"api/Contacts/{currentContact.Id}", editingContactData);
            if (response.IsSuccessStatusCode == true)
            {
                editingContact = false;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("somfing went wong");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    private void CancelEdit(Contact tmp)
    {

        editingContactData.Name = initialman.Name;
        editingContactData.Email = initialman.Email;
        editingContactData.PhoneNumber = initialman.PhoneNumber;
        editingContact = false;

        StateHasChanged();
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    private async void UpdateCustomer()
    {

        await http.PutAsJsonAsync($"api/Customers/{SelectedItem.Id}", SelectedItem);
        StateHasChanged();
        await BlazoredModal.CloseAsync(ModalResult.Ok(SelectedItem));
    }
}
