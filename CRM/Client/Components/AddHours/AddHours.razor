@using CRM.Shared.Model;
@inject HttpClient http;

<div class="container">
    <div class="row">
        <div class="col-sm">
            <div class="row">
                <div class="col-6">
                    <label class="form-label"style="width:100px;">Ret antal timer:</label>
                    <input style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif; width:100px" @bind="SelectedItem.ServiceHours" type="number">
                </div>
                <div class="col-6">
                    @if (SelectedItem.ServiceHours != null)
                    {

                        <label class="form-label">@(SelectedItem.ServiceHours) timer </label>
                    }
                    else
                    {

                        <label class="form-label">@(SelectedItem.ServiceHours ) ingen timer pt</label>
                    }
                  
                </div>
            </div>
            <br />
            <button class="btn btn-primary" @onclick="Confirm">
                Godkend 
            </button>
            <label></label>
            <button class="btn btn-danger" @onclick="Close">
                Fortryd
            </button>
        </div>
    </div>
</div>


@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [Parameter]
    public Customer? SelectedItem { get; set; }
    public float? HoursToBeAdded { get; set; }
    public ServiceHours serviceHours = new();
    private async Task UpdateCustomerTask() => await BlazoredModal.CloseAsync(ModalResult.Ok(SelectedItem));
    private async Task Close() => await BlazoredModal.CloseAsync();

    private async Task Confirm()
    {
        serviceHours.customerId = SelectedItem.Id;
        try
        {
            var response = await http.PostAsJsonAsync<ServiceHours>("api/ServiceHours", serviceHours );


            if (response.IsSuccessStatusCode == true)
            {
                SelectedItem.ServiceHours = SelectedItem.ServiceHours;
                await http.PutAsJsonAsync<Customer>($"api/Customers/{SelectedItem.Id}", SelectedItem);
                await UpdateCustomerTask();
                StateHasChanged();
            }
            else
            {
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
}


@*     
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Customer? SelectedItem { get; set; }
    private Assignment? assignment = new Assignment();

    private bool showErrorMessage = false;

    private async Task Close() => await BlazoredModal.CloseAsync();
    private async Task UpdateCustomerTask() => await BlazoredModal.CloseAsync(ModalResult.Ok(SelectedItem));
    private async Task Confirm()
    {
        assignment.customerId = SelectedItem.Id;

        try
        {
            var response = await http.PostAsJsonAsync<Assignment>("api/Assignments", assignment);

            if (response.IsSuccessStatusCode == true)
            {
                SelectedItem.ServiceHours = SelectedItem.ServiceHours - assignment.Hours;
                await http.PutAsJsonAsync<Customer>($"api/Customers/{SelectedItem.Id}", SelectedItem);
                await UpdateCustomerTask();
            }
            else
            {
                showErrorMessage = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

} *@