@using CRM.Client.Components.Contacts;
@using CRM.Shared.Model;
@using Microsoft.JSInterop;
@using System.Linq.Expressions
@inject HttpClient http;
@inject IJSRuntime JsRuntime

@if (SelectedItem == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*-----------------------------------------------------------------edit data-----------------------------------------------*@
    @if (isEditing)
    {
        <div class="container">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-8">
                        <h2>@SelectedItem.Name <b style="font-weight: bolder;">Kontaktpersoner</b></h2>
                    </div>
                    <div class="col-sm-4">
                        @*---------------TILFØJ NY---------------  *@
                        <button @onclick="CreateContactModal"style="border-radius: 60px; float: right; color: white; font-weight: bolder; background: deepskyblue; padding-left: 10px; padding-right: 10px;" class="btn" type="button"> + Tilføj ny</button>
                        
                    </div>
                </div>
            </div>
            
            <table class="table">
                <tr style="font-weight: bold; border: black; border-bottom-style: solid;">
                    <th>Navn</th>
                    <th>Email</th>
                    <th>Telefonnummer</th>
                    <th>Handlinger</th>
                </tr>
                <tbody>
                @foreach (var contact in Contacts)
                {
                    if (contact.IsHidden == false)
                    {
                        <tr class="tab-content">
                            <td>@contact.Name</td>
                            <td>@contact.Email</td>
                            <td>@contact.PhoneNumber</td>
                            @*---------------Handlings knapper--------------- *@
                            <td> <button @onclick="()=> EditContactModal(contact)"><img src="/css/Logos/Edit.svg" style="height: 30px; width: 33px;" alt="blyant"/></button>
                                <button @onclick="() => ArchiveContact(contact)"><img src="/css/Logos/Delete.svg" style="height: 30px; width: 33px;" alt="du furet"/></button>
                            </td>
                        </tr>
                    }
                   
                }
                </tbody>
            </table>
        </div>
        <div style="float: right; margin: 10px; font-size: 22px">
            <button> Gem</button>
            <button @onclick="closeEdit"> Luk</button>
        </div>
    }
    @*------------------------------------------------------view data-------------------------------------------------------------*@
    else
    {
        <div>
            <div>
                <p style="align-self: center"> <b>Telefonnummer:</b> @SelectedItem.PhoneNumber</p>
            </div>
            <table class="table">
                <caption style="caption-side:top; align-content:center ;color:black;"><b>Kontaktpersoner</b></caption>
                <tbody>
                    @foreach (var contact in Contacts )
                    {
                        if (contact.IsHidden == false)
                        {
                            <tr>
                                <td>@contact.Name</td>
                                <td>@contact.Email</td>
                                <td>@contact.PhoneNumber</td>
                            </tr>
                        }
                       
                    }
                </tbody>
            </table>
            <div class="container">
                <div class="row">
                    <div class="col-sm"> 
                        <p> <b>Tilgængelige servicetimer:</b> @SelectedItem.ServiceHours</p>
                        <p> <b>Størrelse på kunden:</b> @SelectedItem.EmployeeCount</p>
                        <p> <b>Adresse:</b> @SelectedItem.StreetName, @SelectedItem.ZipCode @SelectedItem.CityName</p>
                        <p> <b>CVR:</b> @SelectedItem.CVR</p>
                        <p> <b>EAN:</b> @SelectedItem.EAN</p>
                    </div>
                    <div class="col-sm">
                        <button class="btn" style="float:right; border-color:black; height: 75px; width: 200px;">Task logbog</button>
                        <textarea style="float:right; margin-top: 10px; " placeholder="Kommentarboks"></textarea>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn btn-dark" type="button" @onclick="editCustomer">Rediger</button>
            <button class="btn btn-primary" type="button" @onclick="Close">Okay</button>
        </div>
    }
}

@*-------------------------------------------------------------------Logik---------------------------------------------------- *@
@code {



    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;
    [CascadingParameter] List<Customer> c { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    [Parameter]
    public Customer? SelectedItem { get; set; }
    [Parameter]
    public List<Contact>? Contacts { get; set; }
    private bool isEditing = false;

    private async Task Close() => await BlazoredModal.CloseAsync();


    private void editCustomer()
    {
        isEditing = true;
    }
    private void closeEdit()
    {
        isEditing = false;
    }

    private void CreateContactModal()
    {
        var parameters = new ModalParameters()
          .Add(nameof(CreateContact.SelectedItem), SelectedItem);
        var options = new ModalOptions()
            {
                Size = ModalSize.Automatic
            };
        Modal.Show<CreateContact>("", parameters, options);
        StateHasChanged();
    }
    private void EditContactModal(Contact contact)
    {
        var parameters = new ModalParameters()
        .Add(nameof(EditContact.ContactToEdit), contact);
        var options = new ModalOptions()
            {
                Size = ModalSize.Automatic
            };
        Modal.Show<EditContact>("", parameters, options);
    }
    //public async void DeleteContact(Contact contact)
    //{
    //    // https://stackoverflow.com/questions/60773229/how-to-use-alert-confirm-and-prompt-function-using-blazor
    //    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
    //    if (confirmed)
    //    {
    //        try
    //        {
    //            await http.DeleteAsync($"api/Contacts/{contact.Id}");
    //            StateHasChanged(); // It doesn't update when an element is deleted
    //        }
    //        catch (Exception e)
    //        {
    //            Console.WriteLine(e);
    //        }
    //    }
    //}

    public async void ArchiveContact(Contact contact)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            try
            {
                var content = JsonContent.Create(contact);
                await http.PutAsync($"api/Contacts/Archive/{contact.Id}", content);
                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                
            }
            
        }
       
            
    }




}
