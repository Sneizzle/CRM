@page "/"
@using CRM.Client.Repositories;
@using CRM.Shared;
@using CRM.Shared.Model;
@using CRM.Client.Components.Customer;
@using CRM.Client.Components.States
@inject HttpClient http;
@inject CustomerStateService CustomerState


<PageTitle>CustomersIndex</PageTitle>

@if (CR.customers == null)
{
    <p><em>Loading..</em></p>
}
else
{  
    <div style="max-width: 1000px;max-height:800px; margin:auto; overflow: auto;">
        <div style="max-width:300px">
        <input class="form-control" type="text" placeholder="Search up a customer.."
        @bind="Filter"
        @bind:event="oninput">
        </div>
        <div>
            <button @onclick="@(() => CreateCustomerModal())">KNAP</button>
        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a style="color: black; cursor: pointer">
                            <href @onclick="SortByName">
                                Navn  
                                @if (sortAscendingName == false)
                                {
                                    <img src="Arrowdown.svg" alt="Star SVG" width="15" height="15" />
                                }
                                else
                                {
                                    <img src="Arrowup.svg" alt="Star SVG" width="15" height="15" />
                                }
                              </href>
                        </a>

                    </th>
                    <th>Telefonnr</th>
                    <th @onclick="SortByServiceHours">Service timer
                        @if (sortAscendingHours == false)
                        {
                            <img src="Arrowdown.svg" alt="Star SVG" width="15" height="15" />
                        }
                        else
                        {
                            <img src="Arrowup.svg" alt="Star SVG" width="15" height="15" />

                        }
                        
                    </th>
                    <th @onclick="SortByDateModified">Dato for optankning
                        @if(sortAscending == false)
                        {
                            <img src="Arrowdown.svg" alt="Star SVG" width="15" height="15" />
                        }
                        else
                        {
                            <img src="Arrowup.svg" alt="Star SVG" width="15" height="15" />
                        }
                    </th>
                    <th>Opret task</th>
                    <th>Tank op</th>
                </tr>
            </thead>
            <tbody class="hoverTable">
                @foreach (var customer in CR.customers)
                {
                    if (!IsVisible(customer))
                        continue;
                    <tr @onclick="@(() => OpenCustomerInfoModal(customer))">
                        <td>@customer.Name</td>
                        <td>@customer.PhoneNumber</td>
                        <td>@customer.ServiceHours</td>
                        <td>@customer.DateModified</td>
                        <td>
                            <div>
                                <button style="border:thin; z-index:50"><img src="/Createtask.svg" alt="Star SVG" width="25" height="25" /></button>
                            </div>
                        </td>
                        <td>
                            <div>
                                <button style="border: thin; z-index:50"><img src="/Gasicon.svg" alt="Star SVG" width="25" height="25" /></button>
                            </div>
                        </td>
                    </tr>
                    <tr style="border-bottom: 1px solid #ccc;"></tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    // private List<Customer> customers;
    public string Filter { get; set; }
    private bool sortAscending = true;
    private bool sortAscendingName = true;
    private bool sortAscendingHours = true;
    private List<Contact> contacts;

    CustomerRepo CR = CustomerRepo.Instance;

    private async void OpenCustomerInfoModal(Customer customer)
    {
        var customerContacts = new List<Contact>();
        for (int i = 0; i < contacts.Count; i++)
        {
            if (contacts[i].CustomerId == customer.Id)
            {
                customerContacts.Add(contacts[i]);
            }
        }

        var parameters = new ModalParameters()
            .Add(nameof(CustomerInfo.SelectedItem), customer)
            .Add(nameof(CustomerInfo.Contacts), customerContacts);
        var options = new ModalOptions()
            {
                Size = ModalSize.ExtraLarge
            };
        var customerResult = Modal.Show<CustomerInfo>($"Information for: {customer.Name}", parameters, options);
        // var result = await customerResult.Result;
        // Console.WriteLine("MODALRESULT: " + result.ToString());
        // if (!result.Cancelled)
        // {
        //     Customer tmpCustomer = (Customer)result.Data;
        //     CR.customers.Add(tmpCustomer);
        //     Console.WriteLine("result.confirmed :)");
        //     await CR.InitializeCustomers();
        //     StateHasChanged();
        // }
        // else
        // {
        //     Console.WriteLine("result.Ikkeconfirmed :(");
        //     StateHasChanged();
        // }
    }

    private async void CreateCustomerModal()
    {
        var options = new ModalOptions()
            {
                Size = ModalSize.Automatic
            };
        var customerResult = Modal.Show<CreateCustomer>("Opret Kunde");
        var result = await customerResult.Result;
        if (!result.Cancelled)
        {
            Customer tmpCustomer = (Customer)result.Data;
            CR.AddToCustomers(tmpCustomer);
            Console.WriteLine("result.confirmed :)");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("result.Ikkeconfirmed :(");
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CR.InitializeCustomers();
        //PopulateCustomerRepo();
        // customers = CustomerRepo.GetList();
        contacts = await http.GetFromJsonAsync<List<Contact>>("api/Contacts");
        StateHasChanged();
    }


    // private async void PopulateCustomerRepo()
    // {
    //     try
    //     {
    //         Console.WriteLine("Populating customer list");
    //         //CustomerRepo.customers = await http.GetFromJsonAsync<List<Customer>>("api/Customers");
    //         var tmp = await http.GetFromJsonAsync<List<Customer>>("api/Customers");
    //         CustomerRepo.AddListToCustomers(tmp);
    //         StateHasChanged();
    //     }
    //     catch (Exception e)
    //     {
    //         await Console.Out.WriteLineAsync("InitializeCustomers error: " + e);
    //     }
    // }


    private void SortByName()
    {
        sortAscendingName = !sortAscendingName; //Sætter til false onClick // intially true. 
        sortAscendingHours = true;
        sortAscending = true;
        if (sortAscendingName == true)
        {
            CR.customers = CR.customers.OrderByDescending(c => c.Name).ToList();
        }
        else
        {
            CR.customers = CR.customers.OrderBy(c => c.Name).ToList();
        }
    }
    private void SortByDateModified()
    {
        sortAscending = !sortAscending;
        sortAscendingHours = true; // hvis vi ikke resetter, bliver der ikke ønsket adfærd 
        sortAscendingName = true;
        if (sortAscending == true)
        {
            CR.customers = CR.customers.OrderByDescending(c => c.DateModified).ToList();
        }
        else
        {
            CR.customers = CR.customers.OrderBy(c => c.DateModified).ToList();
            //customers => customers.DateModified is < DateTime.
        }
    }
    private void SortByServiceHours()
    {
        sortAscending = true;
        sortAscendingName = true;
        sortAscendingHours = !sortAscendingHours;
        if(sortAscendingHours == true)
        {
            CR.customers = CR.customers.OrderByDescending(c => c.ServiceHours).ToList();
        }
        else 
        {
            CR.customers = CR.customers.OrderBy(c => c.ServiceHours).ToList();
        }

    }
    public bool IsVisible(Customer customer)
    {
        return string.IsNullOrEmpty(Filter) || customer.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase);
    }
}


<style style="text/css">
    /* Source: https://www.textfixer.com/tutorials/highlight-table-row.php */
    .hoverTable {
        border-collapse: collapse;
    }

        .hoverTable tr {
            background: none;
        }

            .hoverTable tr:hover {
                background-color: lightgray;
            }
</style>
<style>
    #myInput {
        background-image: url('/css/searchicon.png'); /* Add a search icon to input */
        background-position: 10px 12px; /* Position the search icon */
        background-repeat: no-repeat; /* Do not repeat the icon image */
        width: 250px; /* Full-width */
        font-size: 16px; /* Increase font-size */
        padding: 12px 20px 12px 40px; /* Add some padding */
        border: 5px solid #ddd; /* Add a grey border */
        margin-bottom: 12px; /* Add some space below the input */
    }
</style>