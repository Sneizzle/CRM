@using CRM.Shared.Model;

<div class="container">
    <div class="row">
        <div class="col-sm">
            <div class="row">
                <div class="col-6">
                    <label class="form-label"style="width:100px;">tilføj timer:</label>
                    @if (SelectedItem.ServiceHours != null)
                    {
                        <input class="form-control-plaintext" readonly @bind="SelectedItem.ServiceHours" />
                    }
                </div>
                <div class="col-6">
                    <label class="form-label" style="width:100px;">Timer pt:</label>
                    <input style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif; width:100px" @bind="SelectedItem.ServiceHours" disabled="true">
                </div>
            </div>
            <br />
            <button class="btn btn-primary">
                Godkend 
            </button>
            <label></label>
            <button class="btn btn-danger">
                Fortryd
            </button>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public Customer? SelectedItem { get; set; }
    public Customer? HoursToBeAdded { get; set; }


}
<style>
    #formItem label {
        position: absolute;
        text-align: center;
        line-height: 150%;
        font-size: .85em;
    }

    textarea {
        width: 175px;
        height: 100px;
    }

    .table,
    .row,
    .col-12,
    .col-6 {
        margin: 0;
        padding: 0;
    }

    .box {
        display: flex;
    }
</style>

@* div class="container">
    <div class="row">
        <div class="col-sm">
            <br /><br /><br />
            <textarea cols="50" rows="3" placeholder="Beskrivelse" @bind="assignment.Description"></textarea>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <div class="mb-3">
                <label class="form-label">Antal Timer brugt</label>
                <input class="form-control" type="number" @bind="assignment.Hours" />
            </div>
        </div>
        <div class="col-sm">
            <div class="mb-3">
                <label class="form-label">Nuværende antal timer:</label>
                @if (SelectedItem.ServiceHours != null)
                {
                    <input class="form-control-plaintext" readonly @bind="SelectedItem.ServiceHours" />
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md">
            @if (SelectedItem.ServiceHours != null)
            {
                
                <label class="form-label">@(SelectedItem.ServiceHours - assignment.Hours) </label>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            @if (showErrorMessage == true)
            {
                <h5 class="alert-warning">Hov. Et af felterne er ikke blevet udfyldt!</h5>
            }
            <br />
            <button class="btn btn-primary" @onclick="Confirm">Tilføj Task</button>
            <button class="btn btn-danger" @onclick="Close">Annuller</button>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Customer? SelectedItem { get; set; }
    private Assignment? assignment = new Assignment();

    private bool showErrorMessage = false;

    private async Task Close() => await BlazoredModal.CloseAsync();
    private async Task UpdateCustomerTask() => await BlazoredModal.CloseAsync(ModalResult.Ok(SelectedItem));
    private async Task Confirm()
    {
        assignment.customerId = SelectedItem.Id;

        try
        {
            var response = await http.PostAsJsonAsync<Assignment>("api/Assignments", assignment);

            if (response.IsSuccessStatusCode == true)
            {
                SelectedItem.ServiceHours = SelectedItem.ServiceHours - assignment.Hours;
                await http.PutAsJsonAsync<Customer>($"api/Customers/{SelectedItem.Id}", SelectedItem);
                await UpdateCustomerTask();
            }
            else
            {
                showErrorMessage = true;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

} *@